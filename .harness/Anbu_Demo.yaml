pipeline:
  name: Anbu Demo
  identifier: Anbu_Demo
  projectIdentifier: Gabs_Labs
  orgIdentifier: default
  tags:
    CD: ""
    CV: ""
    FF: ""
  stages:
    - stage:
        name: Build App
        identifier: Build_App
        type: CI
        spec:
          cloneCodebase: true
          infrastructure:
            type: KubernetesDirect
            spec:
              connectorRef: account.gkeanbusales
              namespace: harness-cie
              automountServiceAccountToken: true
              nodeSelector: {}
              os: Linux
          execution:
            steps:
              - step:
                  type: RestoreCacheGCS
                  name: Restore Cache
                  identifier: Restore_Cache
                  spec:
                    connectorRef: account.gcpsales
                    bucket: gabs-caching-bucket
                    key: <+pipeline.properties.ci.codebase.repoName>
                    archiveFormat: Tar
                  when:
                    stageStatus: Success
                  failureStrategies: []
              - step:
                  type: RunTests
                  name: Build and Unit Test
                  identifier: Build_and_Unit_Test
                  spec:
                    connectorRef: dockerhubgabs
                    image: maven:3.8.6-openjdk-18
                    language: Java
                    buildTool: Maven
                    args: clean verify
                    packages: com.gabsthecreator
                    runOnlySelectedTests: true
                    preCommand: |-
                      ls -ltra

                      # CUSTOM
                      #microdnf install wget
                      PROJ_DIR=$PWD
                      export JAVA_TOOL_OPTIONS="-Dmaven.repo.local=$PROJ_DIR/.m2/repository"
                    postCommand: |-
                      export version=`mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout -Dmaven.repo.local=$PROJ_DIR/.m2/repository`

                      #export release="<+codebase.branch>-$version-<+codebase.commitSha>"
                      export release="$version"

                      export commitHash=<+codebase.commitSha>

                      export gitBranch=<+codebase.branch>

                      echo "printing current dir"
                      pwd
                      ls -ltra
                      echo "Who am I at runtime"
                      whoami
                    reports:
                      type: JUnit
                      spec:
                        paths:
                          - "**/*.xml"
                    outputVariables:
                      - name: release
                      - name: version
                      - name: commitHash
                      - name: gitBranch
                    imagePullPolicy: IfNotPresent
                  description: We already build to run the tests.
                  failureStrategies: []
              - stepGroup:
                  name: STO
                  identifier: STO
                  steps:
                    - step:
                        type: Security
                        name: Sonar Scan Vulnerabilities
                        identifier: Sonar_Scan_Vulnerabilities
                        spec:
                          privileged: true
                          settings:
                            policy_type: orchestratedScan
                            scan_type: repository
                            product_name: sonarqube
                            product_config_name: sonarqube-agent
                            repository_branch: <+codebase.branch>
                            product_access_token: squ_853c22dfe3fb26453177b37f7d9778bd7dd4855b
                            product_project_name: <+pipeline.properties.ci.codebase.repoName>
                            product_project_key: <+pipeline.properties.ci.codebase.repoName>
                            product_domain: http://sonar.harness-demo.site
                            repository_project: <+pipeline.properties.ci.codebase.repoName>
                            bypass_ssl_check: "true"
                            log_level: DEBUG
                            workspace: /harness/target
                            verify_ssl: "true"
                            product_java_binaries: target/classes
                            product_java_libraries: target/
                          imagePullPolicy: Always
                        when:
                          stageStatus: Success
                          condition: 1 == 0
                        failureStrategies: []
              - parallel:
                  - step:
                      type: SaveCacheGCS
                      name: Save Cache to GCS
                      identifier: SaveCachetoGCS
                      spec:
                        connectorRef: account.gcpsales
                        bucket: gabs-caching-bucket
                        key: <+pipeline.properties.ci.codebase.repoName>
                        sourcePaths:
                          - /harness/.m2
                        archiveFormat: Tar
                      when:
                        stageStatus: Success
                      failureStrategies: []
                  - step:
                      type: BuildAndPushDockerRegistry
                      name: Build Container and Registry
                      identifier: Build_Container_and_Registry
                      spec:
                        connectorRef: dockerhubgabs
                        repo: gacerioni/harness-anbu-demo
                        tags:
                          - latest
                          - <+pipeline.variables.tag>
                        optimize: true
          sharedPaths:
            - /var/run
        when:
          pipelineStatus: Success
    - stage:
        name: Deploy to DEV
        identifier: Deploy_to_DEV
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: anbudemo
            serviceInputs:
              serviceDefinition:
                type: Kubernetes
                spec:
                  artifacts:
                    primary:
                      primaryArtifactRef: <+input>
                      sources: <+input>
          environment:
            environmentRef: DEV
            deployToAll: false
            infrastructureDefinitions:
              - identifier: gkeanbu
          execution:
            steps:
              - step:
                  type: TerraformPlan
                  name: TF Plan GCS
                  identifier: TF_Plan_GCS
                  spec:
                    configuration:
                      command: Apply
                      configFiles:
                        store:
                          type: Github
                          spec:
                            gitFetchType: Branch
                            connectorRef: githubgabs
                            repoName: IaC-Terraform-Gabs
                            branch: main
                            folderPath: gcs-dummy
                      secretManagerRef: harnessSecretManager
                      varFiles:
                        - varFile:
                            type: Remote
                            identifier: tfvars
                            spec:
                              store:
                                type: Github
                                spec:
                                  gitFetchType: Branch
                                  repoName: IaC-Terraform-Gabs
                                  branch: main
                                  paths:
                                    - gcs-dummy/terraform.tfvars
                                  connectorRef: githubgabs
                    provisionerIdentifier: gcsgabs
                  timeout: 10m
              - step:
                  type: JiraCreate
                  name: ITSM - Create Change
                  identifier: Create_Change
                  spec:
                    connectorRef: account.JiraGabs
                    projectKey: HD
                    issueType: Change
                    fields:
                      - name: Description
                        value: "Anbu - A new release is on the way! Version: <+artifacts.primary.tag>"
                      - name: Comment
                        value: This is being managed by Harness ITSM capabilities
                      - name: Summary
                        value: Anbu - Demo Change Request
                  timeout: 1d
              - stepGroup:
                  name: Canary Deployment
                  identifier: canaryDepoyment
                  steps:
                    - step:
                        type: JiraUpdate
                        name: ITSM - Update Ticket
                        identifier: ITSM_Update_Ticket
                        spec:
                          connectorRef: account.JiraGabs
                          issueKey: <+pipeline.stages.Deploy_to_DEV.spec.execution.steps.Create_Change.issue.key>
                          transitionTo:
                            transitionName: ""
                            status: In Progress
                          fields:
                            - name: Comment
                              value: Canary Deployment in <+env.name> has started!
                        timeout: 1d
                    - step:
                        name: Canary Deployment 25
                        identifier: canaryDeployment
                        type: K8sCanaryDeploy
                        timeout: 10m
                        spec:
                          instanceSelection:
                            spec:
                              percentage: 25
                            type: Percentage
                          skipDryRun: false
                    - step:
                        type: CustomApproval
                        name: Check if Flag file exists in Delegate
                        identifier: Check_if_Flag_file_exists_in_Delegate
                        spec:
                          rejectionCriteria:
                            type: KeyValues
                            spec:
                              matchAnyCondition: true
                              conditions: []
                          approvalCriteria:
                            type: KeyValues
                            spec:
                              matchAnyCondition: true
                              conditions:
                                - key: flagexists
                                  operator: equals
                                  value: "0"
                          scriptTimeout: 10m
                          retryInterval: 10s
                          shell: Bash
                          onDelegate: true
                          source:
                            type: Inline
                            spec:
                              script: |-
                                #!/bin/bash

                                cmd="ls /tmp/blabla"
                                $cmd

                                flagexists=$?

                                [ $flagexists -eq 0 ] && echo "$cmd command was successful" || echo "$cmd failed"

                                export flagexists
                          environmentVariables: []
                          outputVariables:
                            - name: flagexists
                              type: String
                              value: flagexists
                        timeout: 1d
                        when:
                          stageStatus: Success
                        failureStrategies: []
                    - step:
                        type: K8sCanaryDeploy
                        name: Canary 50
                        identifier: Canary_50
                        spec:
                          skipDryRun: false
                          instanceSelection:
                            spec:
                              percentage: 50
                            type: Percentage
                        timeout: 10m
                    - step:
                        type: Verify
                        name: Verify Prometheus
                        identifier: Verify_Prometheus
                        spec:
                          type: Canary
                          monitoredService:
                            type: Default
                            spec: {}
                          spec:
                            sensitivity: LOW
                            duration: 5m
                            deploymentTag: <+serviceConfig.artifacts.primary.tag>
                          isMultiServicesOrEnvs: false
                        timeout: 2h
                        failureStrategies:
                          - onFailure:
                              errors:
                                - Verification
                              action:
                                type: ManualIntervention
                                spec:
                                  timeout: 2h
                                  onTimeout:
                                    action:
                                      type: StageRollback
                          - onFailure:
                              errors:
                                - Unknown
                              action:
                                type: ManualIntervention
                                spec:
                                  timeout: 2h
                                  onTimeout:
                                    action:
                                      type: Ignore
                        when:
                          stageStatus: Success
                          condition: 1 == 0
                    - step:
                        name: Canary Delete
                        identifier: canaryDelete
                        type: K8sCanaryDelete
                        timeout: 10m
                        spec: {}
              - parallel:
                  - stepGroup:
                      name: Primary Deployment
                      identifier: primaryDepoyment
                      steps:
                        - step:
                            type: JiraUpdate
                            name: ITSM - Rolling Deployment
                            identifier: ITSM_Rolling_Deployment
                            spec:
                              connectorRef: account.JiraGabs
                              issueKey: <+pipeline.stages.Deploy_to_DEV.spec.execution.steps.Create_Change.issue.key>
                              transitionTo:
                                transitionName: ""
                                status: In Progress
                              fields:
                                - name: Comment
                                  value: "Canary was approved! Doing a Rolling Deployment. "
                            timeout: 1d
                        - step:
                            name: Rolling Deployment
                            identifier: rollingDeployment
                            type: K8sRollingDeploy
                            timeout: 10m
                            spec:
                              skipDryRun: false
                        - step:
                            type: Barrier
                            name: Wait Rolling
                            identifier: Wait_Rolling
                            spec:
                              barrierRef: barriergabs
                            timeout: 10m
                        - step:
                            type: JiraUpdate
                            name: ITSM - Close Change
                            identifier: ITSM_Close_Change
                            spec:
                              connectorRef: account.JiraGabs
                              issueKey: <+pipeline.stages.Deploy_to_DEV.spec.execution.steps.Create_Change.issue.key>
                              transitionTo:
                                transitionName: ""
                                status: Done
                              fields:
                                - name: Comment
                                  value: Deployment was successful! Closing the Change Request ticket.
                            timeout: 1d
                  - stepGroup:
                      name: Integration
                      identifier: Integration
                      steps:
                        - step:
                            type: Barrier
                            name: After-Rolling
                            identifier: AfterRolling
                            spec:
                              barrierRef: barriergabs
                            timeout: 10m
                        - step:
                            type: Http
                            name: Health Check - Actuator
                            identifier: Health_Check_Actuator
                            spec:
                              method: GET
                              headers: []
                              outputVariables: []
                              url: http://34.72.153.177/actuator/health
                              assertion: <+httpResponseCode> == 200
                            timeout: 1m
                            failureStrategies:
                              - onFailure:
                                  errors:
                                    - AllErrors
                                  action:
                                    type: MarkAsSuccess
            rollbackSteps:
              - step:
                  type: JiraUpdate
                  name: ITSM - Failed Change
                  identifier: ITSM_Failed_Change
                  spec:
                    connectorRef: account.JiraGabs
                    issueKey: <+pipeline.stages.Deploy_to_DEV.spec.execution.steps.Create_Change.issue.key>
                    transitionTo:
                      transitionName: ""
                      status: Rejected
                    fields:
                      - name: Comment
                        value: The Change was rejected or the Pipeline has failed.
                  timeout: 1d
              - step:
                  name: Canary Delete
                  identifier: rollbackCanaryDelete
                  type: K8sCanaryDelete
                  timeout: 10m
                  spec: {}
              - step:
                  name: Rolling Rollback
                  identifier: rollingRollback
                  type: K8sRollingRollback
                  timeout: 10m
                  spec: {}
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
        variables: []
        when:
          pipelineStatus: Success
          condition: 1 == 1
  properties:
    ci:
      codebase:
        connectorRef: githubgabs
        repoName: harness-srm-demo
        build: <+input>
  variables:
    - name: tag
      type: String
      description: ""
      value: <+pipeline.stages.Build_App.spec.execution.steps.Build_and_Unit_Test.output.outputVariables.release>
  flowControl:
    barriers:
      - name: barrier-gabs
        identifier: barriergabs
  allowStageExecutions: true
