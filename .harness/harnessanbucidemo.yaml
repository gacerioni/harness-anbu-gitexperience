pipeline:
  name: harness-anbu-ci-demo
  identifier: harnessanbucidemo
  projectIdentifier: default_project
  orgIdentifier: default
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: account.Github
        repoName: gacerioni/harness-srm-demo
        build: <+input>
  stages:
    - stage:
        name: Java Build
        identifier: Java_Build
        type: CI
        spec:
          caching:
            enabled: true
            paths:
              - /root/.m2/repository
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - stepGroup:
                  name: Print Trigger Stuff
                  identifier: Print_Trigger_Stuff
                  steps:
                    - step:
                        type: Run
                        name: Payload
                        identifier: Print_Commit_Messages
                        spec:
                          shell: Sh
                          command: |-
                            echo "Payload"
                            echo "<+trigger>"

                            echo "HACK ZONE"
                            echo "<+trigger.payload[1]>"
              - step:
                  type: Run
                  name: Notify GH Commit Status
                  identifier: Notify_GH_Commit_Status
                  spec:
                    shell: Sh
                    command: |-
                      curl -i \
                        -X POST \
                        -H "Authorization: Bearer <+secrets.getValue('account.Github_Access_Token')>" \
                        -H "Accept: application/vnd.github.v3+json" \
                        https://api.github.com/repos/<+pipeline.properties.ci.codebase.repoName>/statuses/<+codebase.commitSha> \
                        -d '{"state":"pending","target_url":"<+pipeline.execution.url>","description":"Test is running","context":"harness-ci/tests"}'

                      #echo "###################################"
                      #echo "<+pipeline.properties.ci.codebase.repoName>"
                      #echo "-----------------------------------"
                      #echo "<+codebase.commitSha>"
                      #echo "-----------------------------------"
                      #echo "<+pipeline.execution.url>"
                      #echo "###################################"
              - stepGroup:
                  name: Build with Cache
                  identifier: Build_with_Cache
                  steps:
                    - step:
                        type: RunTests
                        name: Run and Build
                        identifier: Run_Tests
                        spec:
                          connectorRef: account.harnessImage
                          image: maven:3.8.6-openjdk-18
                          language: Java
                          buildTool: Maven
                          args: clean test
                          packages: com.gabsthecreator
                          runOnlySelectedTests: true
                          preCommand: |-
                            export version=`mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout -Dmaven.repo.local=/root/.m2/repository`
                            export release="$version"
                            export commitHash=<+codebase.commitSha>
                            export gitBranch=<+codebase.branch>
                          postCommand: |-
                            mvn package -DskipTests


                            echo "printing current dir"
                            pwd
                            ls -ltra
                            echo "Who am I at runtime"
                            whoami

                            ls -ltra /tmp/engine
                          reports:
                            type: JUnit
                            spec:
                              paths:
                                - "**/*.xml"
                          outputVariables:
                            - name: version
                            - name: release
                            - name: commitHash
                            - name: gitBranch
                        when:
                          stageStatus: Success
                          condition: 1 == 0
                        failureStrategies: []
                    - step:
                        type: Run
                        name: mvn version
                        identifier: mvn_version
                        spec:
                          shell: Sh
                          command: |-
                            mvn -version

                            echo ""

                            env | grep JAVA
                    - step:
                        type: RunTests
                        name: Test and Build
                        identifier: Tests_Build
                        spec:
                          language: Java
                          buildTool: Maven
                          args: clean test
                          packages: com.gabsthecreator
                          runOnlySelectedTests: true
                          preCommand: |-
                            export version=`mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout`
                            export release="$version"
                            export commitHash=<+codebase.commitSha>
                            export gitBranch=<+codebase.branch>

                            export JAVA_HOME=/usr/lib/jvm/temurin-17-jdk-amd64
                          postCommand: |-
                            mvn package -DskipTests


                            echo "printing current dir"
                            pwd
                            ls -ltra
                            echo "Who am I at runtime"
                            whoami

                            ls -ltra /tmp/engine
                          reports:
                            type: JUnit
                            spec:
                              paths:
                                - "**/*.xml"
                          outputVariables:
                            - name: version
                            - name: release
                            - name: commitHash
                            - name: gitBranch
                        when:
                          stageStatus: Success
                        failureStrategies: []
                    - step:
                        type: Run
                        name: CIntelligence TEST AFTER BUILD
                        identifier: CIntelligence_TEST_AFTER_BUILD
                        spec:
                          shell: Sh
                          command: |-
                            echo "PRINTING HOME STUFF FROM /harness"
                            pwd
                            echo ""
                            ls -ltr ./*
                            echo ""
                            tree

                            echo "PRINTING STUFF FROM MAVEN PROBABLE REPOS"
                            ls -ltr /root/.m2/repository/*
              - step:
                  type: BuildAndPushDockerRegistry
                  name: Build and Push an image to Docker Registry_1
                  identifier: BuildandPushanimagetoDockerRegistry_1
                  spec:
                    connectorRef: account.harnessImage
                    repo: <+pipeline.variables.DockerHub_User>/<+pipeline.variables.DockerHub_Repo>
                    tags:
                      - latest
                      - <+pipeline.variables.tag>
          sharedPaths:
            - /root/.m2/repository
            - /.m2/repository
        when:
          pipelineStatus: Success
    - stage:
        name: Integration Tests
        identifier: Integration_Tests
        type: CI
        spec:
          cloneCodebase: false
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Background
                  name: Start and expose the APP
                  identifier: myappservice
                  spec:
                    connectorRef: account.harnessImage
                    image: <+pipeline.variables.DockerHub_User>/<+pipeline.variables.DockerHub_Repo>:<+pipeline.variables.tag>
                    shell: Sh
                    portBindings:
                      "8080": "8080"
                    imagePullPolicy: IfNotPresent
              - step:
                  type: Run
                  name: Test from HOST
                  identifier: Test_from_HOST
                  spec:
                    shell: Bash
                    command: |-
                      sleep 10
                      curl localhost:8080
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: Retry
                          spec:
                            retryCount: 3
                            retryIntervals:
                              - 5s
                            onRetryFailure:
                              action:
                                type: MarkAsFailure
              - step:
                  type: Run
                  name: Test from Container
                  identifier: Test_from_Container
                  spec:
                    connectorRef: account.harnessImage
                    image: yauritux/busybox-curl
                    shell: Sh
                    command: curl -i http://myappservice:8080
  variables:
    - name: DockerHub_User
      type: String
      description: ""
      value: <+input>
    - name: DockerHub_Repo
      type: String
      description: ""
      value: harness-anbu-demo
    - name: tag
      type: String
      description: ""
      value: <+pipeline.stages.Java_Build.spec.execution.steps.Build_with_Cache.steps.Tests_Build.output.outputVariables.version>
